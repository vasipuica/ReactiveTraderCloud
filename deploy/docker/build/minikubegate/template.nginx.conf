worker_processes  1;

pid /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {

    log_format logformat
        'MINIKUBEGATE: HTTP(S)/WS(S) - PROXY |____|'
        ' __MINIKUBEGATE_VERSION__ - $request_id |____|'
        ' ($request_method) $scheme://$host$request_uri |____|'
        ' =====> $hostname:$server_port'
        ' =====> $proxy_host:$proxy_port'
        ' =====> $upstream_status'
        ' =====> $status'
        ;

    include                         /etc/nginx/mime.types;
    sendfile                        on;
    default_type                    application/octet-stream;
    error_log                       /dev/stderr;
    access_log                      /dev/stdout     logformat;
    server_names_hash_bucket_size   128;

    # redirection to web
    # ==================
    server {
        listen 80;

        location / {
            # tag
            add_header  X-ReactiveTraderCloud-Proxy-Minikube-Config  'minikubegate-web';
            add_header  X-ReactiveTraderCloud-Proxy-Web-Version '__MINIKUBEGATE_VERSION__';

            # proxy
            proxy_pass        http://web.test:80;
            proxy_set_header  X-Forwarded-Proto     $scheme;
            proxy_set_header  X-Forwarded-For       '$proxy_add_x_forwarded_for, $server_addr';

            # ws
            proxy_http_version  1.1;
            proxy_set_header    Upgrade       $http_upgrade;
            proxy_set_header    Connection    "upgrade";
            # proxy_buffering     off;
        }
    }

    # redirection to broker
    # ====================
    server {
        listen 8000;

        location /ws {
            # tag
            add_header  X-ReactiveTraderCloud-Proxy-Minikube-Config  'minikubegate-broker-ws';
            add_header  X-ReactiveTraderCloud-Proxy-Web-Version '__MINIKUBEGATE_VERSION__';

            # proxy
            proxy_pass        http://broker.test:8000;
            proxy_set_header  X-Forwarded-Proto     $scheme;
            proxy_set_header  X-Forwarded-For       '$proxy_add_x_forwarded_for, $server_addr';

            # ws
            proxy_http_version  1.1;
            proxy_set_header    Upgrade       $http_upgrade;
            proxy_set_header    Connection    "upgrade";
            # proxy_buffering     off;
        }
        location /lp {
            # tag
            add_header  X-ReactiveTraderCloud-Proxy-Minikube-Config  'minikubegate-broker-lp';
            add_header  X-ReactiveTraderCloud-Proxy-Web-Version '__MINIKUBEGATE_VERSION__';

            # proxy
            proxy_pass        http://broker.test:8000;
            proxy_set_header  X-Forwarded-Proto     $scheme;
            proxy_set_header  X-Forwarded-For       '$proxy_add_x_forwarded_for, $server_addr';
        }
    }

    # redirection to eventstore
    # =========================
    server {
        listen 1113;

        location / {
            # tag
            add_header  X-ReactiveTraderCloud-Proxy-Minikube-Config  'minikubegate-eventsore-tcp';
            add_header  X-ReactiveTraderCloud-Proxy-Web-Version '__MINIKUBEGATE_VERSION__';

            # proxy
            proxy_pass        http://eventstore.test:1113;
            proxy_set_header  X-Forwarded-Proto     $scheme;
            proxy_set_header  X-Forwarded-For       '$proxy_add_x_forwarded_for, $server_addr';

            # ws
            proxy_http_version  1.1;
            proxy_set_header    Upgrade       $http_upgrade;
            proxy_set_header    Connection    "upgrade";
            # proxy_buffering     off;
        }
    }
    server {
        listen 2113;

        location / {
            # tag
            add_header  X-ReactiveTraderCloud-Proxy-Minikube-Config  'minikubegate-eventstore';
            add_header  X-ReactiveTraderCloud-Proxy-Web-Version '__MINIKUBEGATE_VERSION__';

            # proxy
            proxy_pass        http://eventstore.test:2113;
            proxy_set_header  X-Forwarded-Proto     $scheme;
            proxy_set_header  X-Forwarded-For       '$proxy_add_x_forwarded_for, $server_addr';

            # ws
            proxy_http_version  1.1;
            proxy_set_header    Upgrade       $http_upgrade;
            proxy_set_header    Connection    "upgrade";
            # proxy_buffering     off;
        }
    }
}
